#!/usr/bin/env perl
# Custom post generation script for internal use by authors of
# embedjournal.com
#
#   Owner: EmbedJournal
#  Author: Siddharth Chandrasekaran
#   Email: siddharth@embedjournal.com
#    Date: 05 April 2017
#

use warnings;
use strict;
use Time::Piece;
use POSIX 'strftime';
use Getopt::Long;
use Pod::Usage 'pod2usage';
use YAML::XS qw(LoadFile DumpFile);
use File::Basename;

=head1 SYNOPSIS

  Jekyll Fervour Management Utility.
  fervour [OPTIONS]

=head1 OPTIONS

  -b, --build          Build site for specified ENV (--env) or for configured ENV
  -i, --incremental    Passes incremental build flag to jekyll.
  -c, --category CAT   Create category CAT (experimental)
  -e, --env ENV        Specify (override) build environment. Can be (dev|prod).
  -h, --help           Print this help

=head1 VERSION

0.01

=cut

my $argc = @ARGV;
my %g_config;

GetOptions(
  'build'         => \ my $do_build,
  'incremental'   => \ my $inc_build,
  'env=s'         => \ my $build_env,
  'category=s'    => \ my $category_name,
  'help'          =>   sub { pod2usage(1) },
);

pod2usage(1) if($argc == 0);

sub readInput {
	my $inp;
	while (1) {
		print "$_[0]: ";
		chomp($inp = <STDIN>);
		return $inp if $inp;
	}
}

sub getSlug
{
	my $s = shift;
	$s = lc $s;
	$s =~ s/\s+/-/g;
	$s =~ s/\//-/g;
	$s =~ s/[^A-Za-z0-9\-\.]//g;
	$s =~ s/-+/-/g;
	return $s;
}

sub write_categories_yml
{
	my $yml_object = shift;
	my $file = shift;
	open my $f, ">", $file // die "Unable to open file $file";
	foreach (@{$yml_object}) {
		# Wrap description at 100 chars and strip tailing newline.
		$_->{description} =~ s/(.{0,100}(?:\s|$))/    $1\n/g;
		$_->{description} =~ s/\s+$//;
		# Write data to file.
		print $f "-\n";
		print $f "  name: \"$_->{name}\"\n";
		print $f "  url:  \"$_->{url}\"\n";
		print $f "  image: \"$_->{image}\"\n";
		print $f "  description: >\n";
		print $f "$_->{description}\n";
	}
	close ($f);
}

sub create_category()
{
	my $tf = '/tmp/cat_' . get_rand_token() . '.yml';
	open my $f, ">", $tf // die "cannot crete file $tf";
	print $f "name: \"$category_name\"\n";
	print $f "image: \"/assets/images/categories/default.jpg\"\n";
	print $f "description: >\n";
	print $f "  TODO, add a short summary for your category. This can extend\n";
	print $f "  multiple lines (like this one) too.\n";
	close($f);
	system(vi => $tf);
	print "\n";
	system(cat => $tf);
	exit if (readInput("\n\nDo you wish to proceed? [y/N]") !~ /y/i);

	my $new_cat;
	$new_cat = LoadFile("$tf");
	$category_name = $new_cat->{name};
	my $cat_slug = getSlug($category_name);
	$new_cat->{url} = "/category/$cat_slug";

	system(mkdir => "_posts/$cat_slug");
	system(mkdir => "assets/posts/$cat_slug");

	open my $cat_file, ">", "_category/$cat_slug.md";
	print $cat_file "---\n";
	print $cat_file "title: \"$category_name\"\n";
	print $cat_file "paginate:\n";
	print $cat_file "  limit: false\n";
	print $cat_file "category: \"Embedded\"\n";
	print $cat_file "---\n";
	close($cat_file);

	# Append this new category to existing category list
	my $yaml = LoadFile('_data/categories.yml');
	push @{$yaml}, $new_cat;
	write_categories_yml($yaml, '_data/categories.yml');
	unlink($tf);
}

sub load_config()
{
	my ($line, $k, $v);
	return undef unless (-f ".config");

	open(my $f, "<", ".config");

	while (<$f>) {
		chomp; ++$line;
		next if (/^$/);
		next if (/^#.*/);
		($k, $v) = /^\s?+(\S+)\s?+=\s?+(\S+)\s?+$/;
		if (!defined($k) || !defined($v)) {
			print "Invalid. In file .config at line $line: $_\n";
			next;
		}
		# print("k:$k v:$v\n");
		$g_config{$k}=$v;
	}
}

sub build_site()
{
	my ($env, $opts);

	$env = $g_config{'ENV'} if (defined($g_config{'ENV'}));
	$env = $build_env if (defined($build_env));

	die "Must provide/configure ENV\n" if (!defined ($env));
	$opts = "--source jekyll ";

	if ($env =~ /dev/) {
		$ENV{'JEKYLL_ENV'}="development";
		$opts .= "--config jekyll/_config.yml,jekyll/_config_dev.yml ";
		$opts .= "-d $g_config{'DEV_PATH'} " if ($g_config{'DEV_PATH'});
	} elsif ($env =~ /prod/) {
		$ENV{'JEKYLL_ENV'}="production";
		$opts .= "--config jekyll/_config.yml ";
		$opts .= "-d $g_config{'PROD_PATH'} " if ($g_config{'PROD_PATH'});
	} else {
		die "Unknown build environment!\n";
	}

	$opts .= "--incremental " if ($inc_build);

	print "jekyll build $opts\n";
	system ("jekyll build $opts");
	exit;
}

load_config();
build_site() if $do_build;
create_category() if (defined $category_name);

