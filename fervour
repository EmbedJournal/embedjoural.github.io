#!/usr/bin/env perl
# Custom post generation script for internal use by authors of
# embedjournal.com
#
#   Owner: EmbedJournal
#  Author: Siddharth Chandrasekaran
#   Email: siddharth@embedjournal.com
#    Date: 05 April 2017
#

use warnings;
use strict;
use Time::Piece;
use POSIX 'strftime';
use Getopt::Long;
use Pod::Usage 'pod2usage';
use YAML::XS qw(LoadFile DumpFile);
use File::Basename;

=head1 SYNOPSIS

  Jekyll Fervour Management Utility.
  fervour [OPTIONS]

=head1 OPTIONS

  -b, --build          Build site for specified ENV (--env) or for configured ENV
  -u, --update         Updated git repo to latest pushed changes
  -i, --incremental    Passes incremental build flag to jekyll.
  -c, --category CAT   Create category CAT (experimental)
  -e, --env ENV        Specify (override) build environment. Can be (dev|prod).
  -s, --ss-cert        Setup self signed SSL certificate
  -r, --run            Run nginx container
  -h, --help           Print this help

=head1 VERSION

0.01

=cut

my $argc = @ARGV;
my %g_config;

GetOptions(
  'build'         => \ my $do_build,
  'update'        => \ my $do_git_update,
  'incremental'   => \ my $inc_build,
  'category=s'    => \ my $category_name,
  'env=s'         => \ my $build_env,
  'ss-cert'       => \ my $do_create_cert,
  'run'           => \ my $run_server,
  'help'          =>   sub { pod2usage(1) },
);

pod2usage(1) if($argc == 0);

sub readInput {
	my $inp;
	while (1) {
		print "$_[0]: ";
		chomp($inp = <STDIN>);
		return $inp if $inp;
	}
}

sub getSlug
{
	my $s = shift;
	$s = lc $s;
	$s =~ s/\s+/-/g;
	$s =~ s/\//-/g;
	$s =~ s/[^A-Za-z0-9\-\.]//g;
	$s =~ s/-+/-/g;
	return $s;
}

sub write_categories_yml
{
	my $yml_object = shift;
	my $file = shift;
	open my $f, ">", $file // die "Unable to open file $file";
	foreach (@{$yml_object}) {
		# Wrap description at 100 chars and strip tailing newline.
		$_->{description} =~ s/(.{0,100}(?:\s|$))/    $1\n/g;
		$_->{description} =~ s/\s+$//;
		# Write data to file.
		print $f "-\n";
		print $f "  name: \"$_->{name}\"\n";
		print $f "  url:  \"$_->{url}\"\n";
		print $f "  image: \"$_->{image}\"\n";
		print $f "  description: >\n";
		print $f "$_->{description}\n";
	}
	close ($f);
}

sub create_category()
{
	my $tf = '/tmp/cat_' . get_rand_token() . '.yml';
	open my $f, ">", $tf // die "cannot crete file $tf";
	print $f "name: \"$category_name\"\n";
	print $f "image: \"/assets/images/categories/default.jpg\"\n";
	print $f "description: >\n";
	print $f "  TODO, add a short summary for your category. This can extend\n";
	print $f "  multiple lines (like this one) too.\n";
	close($f);
	system(vi => $tf);
	print "\n";
	system(cat => $tf);
	exit if (readInput("\n\nDo you wish to proceed? [y/N]") !~ /y/i);

	my $new_cat;
	$new_cat = LoadFile("$tf");
	$category_name = $new_cat->{name};
	my $cat_slug = getSlug($category_name);
	$new_cat->{url} = "/category/$cat_slug";

	system(mkdir => "_posts/$cat_slug");
	system(mkdir => "assets/posts/$cat_slug");

	open my $cat_file, ">", "_category/$cat_slug.md";
	print $cat_file "---\n";
	print $cat_file "title: \"$category_name\"\n";
	print $cat_file "paginate:\n";
	print $cat_file "  limit: false\n";
	print $cat_file "category: \"Embedded\"\n";
	print $cat_file "---\n";
	close($cat_file);

	# Append this new category to existing category list
	my $yaml = LoadFile('_data/categories.yml');
	push @{$yaml}, $new_cat;
	write_categories_yml($yaml, '_data/categories.yml');
	unlink($tf);
}

sub load_config()
{
	my ($line, $k, $v);
	return undef unless (-f ".config");

	open(my $f, "<", ".config");

	while (<$f>) {
		chomp; ++$line;
		next if (/^$/);
		next if (/^#.*/);
		($k, $v) = /^\s?+(\S+)\s?+=\s?+(\S+)\s?+$/;
		if (!defined($k) || !defined($v)) {
			print "Invalid. In file .config at line $line: $_\n";
			next;
		}
		# print("k:$k v:$v\n");
		$g_config{$k}=$v;
	}
}

sub generate_scaled_images()
{
	my @file_list;
	my @post_file_list = `find content/images/ jekyll/assets/images/categories/ -type f -name 'post-thumb.*' | grep -v '/scaled/'`;
	my @category_file_list = `find jekyll/assets/images/categories/ -maxdepth 1 -type f`;
	@file_list = (@post_file_list, @category_file_list);
	foreach (@file_list) {
		chomp;
		#print("Testing $_\n");
		my ($name, $path) = fileparse($_);
		next if (-f "$path/scaled/$name");
		print "Generating scaled image at ${path}scaled/$name\n";
		system("mkdir -p $path/scaled");
		system("convert $path/$name -resize 80x80^ -gravity center -extent 80x80 $path/scaled/$name");
	}
}

sub git_update()
{
	system("git pull origin master");
	system("git submodule update --recursive --remote");
	exit;
}

sub create_self_signed_ssl_certificate()
{
	system("mkdir -p site/ssl");
	system(
		"openssl req -x509 -newkey rsa:4096 -nodes"
			." -subj '/CN=loc.embedjournal.com'"
			." -keyout site/ssl/embedjournal-key.pem"
			." -out site/ssl/embedjournal-cert.pem"
			." -days 365"
			." > /dev/null 2>&1"
	);
	exit;
}

sub build_site()
{
	generate_scaled_images();
	print "fervour: defering build to docker!\n";
	system("docker-compose up embedjournal");
	exit;
}

sub run_nginx()
{
	print "fervour: starting server...\n";
	system("docker-compose up -d server");
	exit;
}

git_update() if $do_git_update;
create_self_signed_ssl_certificate() if $do_create_cert;

load_config();
build_site() if $do_build;
run_nginx() if $run_server;
create_category() if (defined $category_name);

