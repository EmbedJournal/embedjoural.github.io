#!/usr/bin/env perl
# Custom post generation script for internal use by authors of
# embedjournal.com
#
#   Owner: EmbedJournal
#  Author: Siddharth Chandrasekaran
#   Email: siddharth@embedjournal.com
#    Date: 05 April 2017
#

use warnings;
use strict;
use Time::Piece;
use POSIX 'strftime';
use Getopt::Long;
use Pod::Usage 'pod2usage';
use YAML::XS qw(LoadFile DumpFile);
use File::Basename;

=head1 SYNOPSIS

  Jekyll Fervour Management Utility.
  fervour [OPTIONS]

=head1 OPTIONS

  -b, --build          Build site for specified ENV (--env) or for configured ENV
  -i, --incremental    Passes incremental build flag to jekyll.
  -e, --env ENV        Specify (override) build environment. Can be (dev|prod).
  -d, --draft          Create new draft interactively
  -c, --check          Check if post is structured correctly
  -p, --publish PATH   Pubish a draft at POST
  -w, --wrap PATH      Wrap a post specified by PATH for email.
  -h, --help           Print this help

=head1 VERSION

0.01

=cut

my $author_default = {
	name => 'Your-Nick-Name',
	full_name => 'Fistname Lastname',
	email => 'you@example.com',
	short_desc => 'A short writeup about yourself.',
	social => {
		twitter  => 'http://twitter.com/XXX',
		facebook => 'https://facebook.com/XXX',
		github   => 'https://github.com/XXX',
		linkedin => 'https://in.linkedin.com/in/XXX'
	}
};

my $argc = @ARGV;
my %g_config;

GetOptions(
  'build'         => \ my $do_build,
  'incremental'   => \ my $inc_build,
  'env=s'         => \ my $build_env,
  'draft'         => \ my $new_draft,
  'category=s'    => \ my $category_name,
  'publish=s'     => \ my $publishDraftPath,
  'wrap=s'        => \ my $packPostPath,
  'help'          =>   sub { pod2usage(1) },
);

pod2usage(1) if($argc == 0);

sub readInput {
	my $inp;
	while (1) {
		print "$_[0]: ";
		chomp($inp = <STDIN>);
		return $inp if $inp;
	}
}

sub getSlug
{
	my $s = shift;
	$s = lc $s;
	$s =~ s/\s+/-/g;
	$s =~ s/\//-/g;
	$s =~ s/[^A-Za-z0-9\-\.]//g;
	$s =~ s/-+/-/g;
	return $s;
}

sub getCategory
{
	my $yaml = LoadFile('_data/categories.yml');
	my @categories = map { $_->{name} } @{$yaml};
	for my $i (0..$#categories) {
		printf "\t%2d - %s\n", $i+1, $categories[$i];
	}
	print "\n";
	my $catID;
	while (1) {
		$catID = readInput("Category index");
		my $isValid = 1;
		$isValid = 0 if (($catID !~ /^\d+$/) or
				(int($catID) < 0) or
				(int($catID) > ($#categories + 1)));
		print ("\nInvalid Input\n") unless($isValid);
		last if ($isValid);
	}
	return $categories[int($catID)-1];
}

sub getInputInteractive()
{
	print "\n\t----------------------------------------------------------------------------\n";
	print "\t   EmbedJournal.com  - Add a brain to eveything with embedded electronics       ";
	print "\n\t----------------------------------------------------------------------------\n";

	print "\n\tWelcome Author, Give your article a title. be sure to keep the title attractive\n";
	print   "\tmeaningful and short. This how your post will be called once it is published\n";
	print   "\tThink what your readers will search for when they have to reach your post. Use\n";
	print   "\tthose keywords in the post title so your post will be ranked well at google.\n\n";

	my $t = readInput("Post title");

	print "\n\tCurrently we support the following categories. Choose the broad field that best\n";
	print   "\tsuits your content. If your field is not here, or you have some doubts mail one\n";
	print   "\tother authors and they should be able to help you out.\n\n";

	my $c = getCategory();

	return ($t, $c);
}

sub create_draft()
{
	unless(-f ".author.yml") {
		DumpFile('.author.yml', $author_default);
		system(vi => '.author.yml');
	}
	my $author_yml = LoadFile('.author.yml');
	my ($title, $category) = getInputInteractive();
	my $slug = getSlug($title);
	my $post_yml = {
		title => $title,
		date_created => strftime('%Y-%m-%dT%H:%M:%S%z', localtime()),
		author => $author_yml->{name},
		permalink => "/$slug/",
		category => $category,
	};
	my $draftPath = "drafts/draft-$slug";
	system("mkdir -p $draftPath");
	DumpFile("$draftPath/.post.yml", $post_yml);
	DumpFile("$draftPath/.author.yml", $author_yml);

	system("touch", "$draftPath/post.md");

	print "\nCreated new draft at $draftPath\n";
	exit;
}

sub pack_post()
{
	die "Unable to find $packPostPath. Should be path to post directory." unless (-d $packPostPath);
	my $zipName = strftime ('%y%m%d', localtime()) . "_post.tar.gz";
	system("tar", "czf", $zipName, $packPostPath);
	exit;
}

sub get_rand_token()
{
	srand( time() ^ ($$ + ($$ << 15)) );
	my @v = qw ( a e i o u y );
	my @c = qw ( b c d f g h j k l m n p q r s t v w x z );

	my ($flip, $str) = (0,'');
	$str .= ($flip++ % 2) ? $v[rand(6)] : $c[rand(20)] for 1 .. 9;
	$str =~ s/(....)/$1 . int rand(10)/e;
	$str = ucfirst $str if rand() > 0.5;
	return $str;
}

sub publish_draft()
{
	die "Invalid draft path path $publishDraftPath" unless (-d $publishDraftPath);
	die "Unable to locate .authors.yml" unless(-f "$publishDraftPath/.author.yml");
	die "Unable to locate .post.yml" unless(-f "$publishDraftPath/.post.yml");
	die "Unable to locate post.md" unless(-f "$publishDraftPath/post.md");

	my $rand_token = get_rand_token();
	my $thumb = glob "$publishDraftPath/post-thumb.*";
	my $thumbnail = basename($thumb) if (defined($thumb));

	system(cat => "$publishDraftPath/.post.yml");

	exit if (readInput("Do you wish to proceed? [y/N]") !~ /y/i);

	my $post_yml = LoadFile("$publishDraftPath/.post.yml");
	my $post_slug = getSlug($post_yml->{title});
	my $category_slug = getSlug($post_yml->{category});
	my $postName = strftime('%Y-%m-%d-', localtime()) . $post_slug;

	my @fileList = grep {!(/post.md$/)} glob "$publishDraftPath/*";
	my $postPath = "_posts/$category_slug";
	my $imagePath = "assets/posts/$category_slug/$postName";

	system("mkdir -p $postPath");
	system("mkdir -p $imagePath");
	open (my $O, "<", "$publishDraftPath/post.md");
	open (my $F, ">", "$postPath/$postName.md") or die "Unable to create post file";
	print $F "---\n";
	print $F "title: \"$post_yml->{title}\"\n";
	print $F "date: ", strftime('%Y-%m-%dT%H:%M:%S%z', localtime()), "\n";
	print $F "author: $post_yml->{author}\n";
	print $F "thumbnail: $thumbnail\n" if (defined($thumbnail));
	print $F "permalink: /$post_slug/\n";
	print $F "dsq_thread_id: \"$rand_token\"\n";
	print $F "category: \"$post_yml->{category}\"\n";
	print $F "tags: [  ]\n";
	print $F "---\n\n";

	while (<$O>) {
		print $F "$_";
	}

	foreach (@fileList) {
		system("cp", "$_", "$imagePath");
	}
	exit;
}

sub write_categories_yml
{
	my $yml_object = shift;
	my $file = shift;
	open my $f, ">", $file // die "Unable to open file $file";
	foreach (@{$yml_object}) {
		# Wrap description at 100 chars and strip tailing newline.
		$_->{description} =~ s/(.{0,100}(?:\s|$))/    $1\n/g;
		$_->{description} =~ s/\s+$//;
		# Write data to file.
		print $f "-\n";
		print $f "  name: \"$_->{name}\"\n";
		print $f "  url:  \"$_->{url}\"\n";
		print $f "  image: \"$_->{image}\"\n";
		print $f "  description: >\n";
		print $f "$_->{description}\n";
	}
	close ($f);
}

sub create_category()
{
	my $tf = '/tmp/cat_' . get_rand_token() . '.yml';
	open my $f, ">", $tf // die "cannot crete file $tf";
	print $f "name: \"$category_name\"\n";
	print $f "image: \"/assets/images/categories/default.jpg\"\n";
	print $f "description: >\n";
	print $f "  TODO, add a short summary for your category. This can extend\n";
	print $f "  multiple lines (like this one) too.\n";
	close($f);
	system(vi => $tf);
	print "\n";
	system(cat => $tf);
	exit if (readInput("\n\nDo you wish to proceed? [y/N]") !~ /y/i);

	my $new_cat;
	$new_cat = LoadFile("$tf");
	$category_name = $new_cat->{name};
	my $cat_slug = getSlug($category_name);
	$new_cat->{url} = "/category/$cat_slug";

	system(mkdir => "_posts/$cat_slug");
	system(mkdir => "assets/posts/$cat_slug");

	open my $cat_file, ">", "_category/$cat_slug.md";
	print $cat_file "---\n";
	print $cat_file "title: \"$category_name\"\n";
	print $cat_file "paginate:\n";
	print $cat_file "  limit: false\n";
	print $cat_file "category: \"Embedded\"\n";
	print $cat_file "---\n";
	close($cat_file);

	# Append this new category to existing category list
	my $yaml = LoadFile('_data/categories.yml');
	push @{$yaml}, $new_cat;
	write_categories_yml($yaml, '_data/categories.yml');
	unlink($tf);
}

sub load_config()
{
	my ($line, $k, $v);
	return undef unless (-f ".config");

	open(my $f, "<", ".config");

	while (<$f>) {
		chomp; ++$line;
		next if (/^$/);
		next if (/^#.*/);
		($k, $v) = /^\s?+(\S+)\s?+=\s?+(\S+)\s?+$/;
		if (!defined($k) || !defined($v)) {
			print "Invalid. In file .config at line $line: $_\n";
			next;
		}
		# print("k:$k v:$v\n");
		$g_config{$k}=$v;
	}
}

sub build_site()
{
	my ($env, $opts);

	$env = $g_config{'ENV'} if (defined($g_config{'ENV'}));
	$env = $build_env if (defined($build_env));

	die "Must provide/configure ENV\n" if (!defined ($env));

	if ($env =~ /dev/) {
		$ENV{'JEKYLL_ENV'}="development";
		$opts .= "--config _config.yml,_config_dev.yml ";
		$opts .= "-d $g_config{'DEV_PATH'} " if ($g_config{'DEV_PATH'});
	} elsif ($env =~ /prod/) {
		$ENV{'JEKYLL_ENV'}="production";
		$opts .= "--config _config.yml ";
		$opts .= "-d $g_config{'PROD_PATH'} " if ($g_config{'PROD_PATH'});
	} else {
		die "Unknown build environment!\n";
	}

	$opts .= "--incremental " if ($inc_build);

	print "jekyll build $opts\n";
	system ("jekyll build $opts");
	exit;
}

sub main()
{
	load_config();
	build_site() if $do_build;
	create_draft() if $new_draft;
	create_category() if (defined $category_name);
	publish_draft() if (defined $publishDraftPath);
	pack_post() if (defined $packPostPath);
}

main();
